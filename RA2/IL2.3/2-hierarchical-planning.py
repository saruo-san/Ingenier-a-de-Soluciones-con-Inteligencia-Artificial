"""
IL2.3: Planificaci√≥n Jer√°rquica con LangChain
============================================

Este m√≥dulo demuestra c√≥mo implementar planificaci√≥n jer√°rquica, donde un objetivo 
complejo se descompone en sub-objetivos manejables organizados en niveles de abstracci√≥n.

Conceptos Clave:
- Descomposici√≥n de objetivos complejos en sub-tareas
- Niveles de abstracci√≥n (Alto, Medio, Bajo)
- Gesti√≥n de dependencias entre sub-objetivos
- Ejecuci√≥n ordenada seg√∫n prioridades

Para Estudiantes:
La planificaci√≥n jer√°rquica es √∫til cuando tienes tareas complejas que necesitan 
dividirse en pasos m√°s peque√±os y manejables. Por ejemplo, "Desarrollar una aplicaci√≥n"
se divide en: dise√±ar, implementar, probar, desplegar.
"""

# Requiere: pip install langchain langchain-openai openai python-dotenv
from langchain_openai import ChatOpenAI
from langchain.agents import initialize_agent, Tool, AgentType
from langchain.prompts import PromptTemplate
from typing import List, Dict, Any
import os
import json

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv no est√° instalado. Inst√°lalo con: pip install python-dotenv")
    exit(1)

# Obtener variables de entorno
github_token = os.getenv("GITHUB_TOKEN")
github_base_url = os.getenv("GITHUB_BASE_URL", "https://models.inference.ai.azure.com")

if not github_token:
    print("‚ùå GITHUB_TOKEN no est√° configurado. Por favor verifica tu archivo .env")
    print("üí° Tu archivo .env debe contener: GITHUB_TOKEN=tu_token_aqui")
    exit(1)

# Configurar LLM
llm = ChatOpenAI(
    model="gpt-4o",
    base_url=github_base_url,
    api_key=github_token,
    temperature=0.7
)

print("‚úÖ LLM configurado correctamente")


class HierarchicalPlanner:
    """
    Planificador Jer√°rquico que descompone objetivos en m√∫ltiples niveles
    
    Atributos:
        llm: Modelo de lenguaje para generar planes
        levels: Niveles de abstracci√≥n (alto, medio, bajo)
        plan_hierarchy: Estructura del plan jer√°rquico
    """
    
    def __init__(self, llm):
        self.llm = llm
        self.levels = ["Alto", "Medio", "Bajo"]
        self.plan_hierarchy = {}
    
    def decompose_goal(self, goal: str) -> Dict[str, List[str]]:
        """
        Descompone un objetivo en sub-objetivos jer√°rquicos
        
        Args:
            goal: Objetivo principal a descomponer
            
        Returns:
            Diccionario con niveles y sus sub-objetivos
        """
        print(f"\nüéØ Descomponiendo objetivo: '{goal}'")
        print("=" * 60)
        
        # Prompt para descomposici√≥n jer√°rquica
        decomposition_prompt = f"""
        Descomp√≥n el siguiente objetivo en 3 niveles jer√°rquicos:
        
        Objetivo Principal: {goal}
        
        Proporciona la descomposici√≥n en formato JSON con esta estructura:
        {{
            "Alto": ["sub-objetivo 1", "sub-objetivo 2", ...],
            "Medio": ["tarea 1", "tarea 2", ...],
            "Bajo": ["acci√≥n 1", "acci√≥n 2", ...]
        }}
        
        - Nivel Alto: Grandes fases o etapas del proyecto
        - Nivel Medio: Tareas espec√≠ficas dentro de cada fase
        - Nivel Bajo: Acciones concretas y detalladas
        
        Responde SOLO con el JSON, sin texto adicional.
        """
        
        try:
            response = self.llm.invoke(decomposition_prompt)
            hierarchy = json.loads(response.content)
            
            # Mostrar la jerarqu√≠a
            for level in self.levels:
                print(f"\nüìä Nivel {level}:")
                for i, item in enumerate(hierarchy.get(level, []), 1):
                    print(f"   {i}. {item}")
            
            self.plan_hierarchy = hierarchy
            return hierarchy
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en descomposici√≥n: {e}")
            # Plan por defecto
            return {
                "Alto": ["Fase 1", "Fase 2", "Fase 3"],
                "Medio": ["Tarea 1", "Tarea 2", "Tarea 3"],
                "Bajo": ["Acci√≥n 1", "Acci√≥n 2", "Acci√≥n 3"]
            }
    
    def create_execution_plan(self, hierarchy: Dict[str, List[str]]) -> List[Dict[str, Any]]:
        """
        Crea un plan de ejecuci√≥n ordenado desde el nivel m√°s bajo al m√°s alto
        
        Args:
            hierarchy: Jerarqu√≠a de objetivos
            
        Returns:
            Lista de tareas ordenadas para ejecuci√≥n
        """
        print("\n\nüìã Generando Plan de Ejecuci√≥n...")
        print("=" * 60)
        
        execution_plan = []
        task_id = 1
        
        # Ejecutar desde el nivel m√°s bajo (acciones concretas) hacia arriba
        for level in reversed(self.levels):
            items = hierarchy.get(level, [])
            priority = self.levels.index(level) + 1
            
            for item in items:
                task = {
                    "id": task_id,
                    "level": level,
                    "description": item,
                    "priority": priority,
                    "status": "pending"
                }
                execution_plan.append(task)
                task_id += 1
        
        # Mostrar plan de ejecuci√≥n
        print("\nüî¢ Orden de Ejecuci√≥n (del detalle a lo general):")
        for task in execution_plan:
            print(f"   [{task['id']}] {task['level']}: {task['description']} (Prioridad: {task['priority']})")
        
        return execution_plan
    
    def execute_plan(self, execution_plan: List[Dict[str, Any]]) -> None:
        """
        Simula la ejecuci√≥n del plan jer√°rquico
        
        Args:
            execution_plan: Plan de ejecuci√≥n a ejecutar
        """
        print("\n\nüöÄ Ejecutando Plan Jer√°rquico...")
        print("=" * 60)
        
        for task in execution_plan:
            print(f"\n‚ñ∂Ô∏è  Ejecutando Tarea #{task['id']}")
            print(f"    Nivel: {task['level']}")
            print(f"    Descripci√≥n: {task['description']}")
            print(f"    Prioridad: {task['priority']}")
            
            # Simular ejecuci√≥n
            task['status'] = "completed"
            print(f"    ‚úÖ Estado: Completada")
        
        print("\n\nüéâ Plan Jer√°rquico Completado Exitosamente!")
        
        # Resumen
        print("\nüìä Resumen de Ejecuci√≥n:")
        for level in reversed(self.levels):
            count = sum(1 for t in execution_plan if t['level'] == level)
            print(f"   - Nivel {level}: {count} tareas completadas")


def demo_hierarchical_planning():
    """
    Demostraci√≥n educativa de planificaci√≥n jer√°rquica
    """
    print("\n" + "="*70)
    print("  üéì DEMOSTRACI√ìN: PLANIFICACI√ìN JER√ÅRQUICA CON LANGCHAIN")
    print("="*70)
    
    # Crear planificador
    planner = HierarchicalPlanner(llm)
    
    # Ejemplo 1: Desarrollo de Software
    print("\n\nüìö EJEMPLO 1: Desarrollo de una Aplicaci√≥n Web")
    print("-" * 70)
    
    goal1 = "Desarrollar una aplicaci√≥n web de gesti√≥n de tareas"
    hierarchy1 = planner.decompose_goal(goal1)
    plan1 = planner.create_execution_plan(hierarchy1)
    planner.execute_plan(plan1)
    
    # Ejemplo 2: Investigaci√≥n Acad√©mica
    print("\n\n" + "="*70)
    print("\nüìö EJEMPLO 2: Investigaci√≥n sobre Inteligencia Artificial")
    print("-" * 70)
    
    goal2 = "Realizar una investigaci√≥n acad√©mica sobre IA en educaci√≥n"
    hierarchy2 = planner.decompose_goal(goal2)
    plan2 = planner.create_execution_plan(hierarchy2)
    planner.execute_plan(plan2)
    
    # Lecciones aprendidas
    print("\n\n" + "="*70)
    print("  üí° LECCIONES CLAVE PARA ESTUDIANTES")
    print("="*70)
    print("""
    1. La planificaci√≥n jer√°rquica ayuda a manejar la complejidad
    2. Dividir objetivos grandes en pasos peque√±os facilita la ejecuci√≥n
    3. Los niveles de abstracci√≥n permiten ver el proyecto desde diferentes perspectivas
    4. La priorizaci√≥n asegura que se completen primero las tareas fundamentales
    5. Un plan bien estructurado mejora la organizaci√≥n y el seguimiento
    """)


def demo_with_agent():
    """
    Demostraci√≥n usando un agente LangChain con herramienta de planificaci√≥n
    """
    print("\n\n" + "="*70)
    print("  ü§ñ DEMOSTRACI√ìN: AGENTE CON PLANIFICACI√ìN JER√ÅRQUICA")
    print("="*70)
    
    # Herramienta de planificaci√≥n
    def plan_hierarchically(objetivo: str) -> str:
        """Crea un plan jer√°rquico para un objetivo dado"""
        planner = HierarchicalPlanner(llm)
        hierarchy = planner.decompose_goal(objetivo)
        
        # Formatear resultado
        result = f"Plan Jer√°rquico para: {objetivo}\n\n"
        for level in ["Alto", "Medio", "Bajo"]:
            result += f"Nivel {level}:\n"
            for item in hierarchy.get(level, []):
                result += f"  - {item}\n"
            result += "\n"
        return result
    
    # Crear herramienta
    planning_tool = Tool(
        name="PlanificadorJerarquico",
        func=plan_hierarchically,
        description="Crea un plan jer√°rquico descomponiendo un objetivo complejo en sub-objetivos organizados por niveles de abstracci√≥n."
    )
    
    # Crear agente
    agent = initialize_agent(
        tools=[planning_tool],
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        verbose=True
    )
    
    # Ejecutar agente
    print("\nü§ñ Agente trabajando en planificaci√≥n...\n")
    resultado = agent.run("Crea un plan jer√°rquico para organizar un evento acad√©mico de IA")
    print(f"\nüìã Resultado del Agente:\n{resultado}")


if __name__ == "__main__":
    # Ejecutar demostraciones
    demo_hierarchical_planning()
    
    print("\n\n" + "="*70)
    input("Presiona ENTER para ver la demostraci√≥n con agente...")
    demo_with_agent()
    
    print("\n\n‚úÖ Demostraci√≥n completada. ¬°Experimenta con tus propios objetivos!")

